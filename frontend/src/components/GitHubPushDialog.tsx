import React, { useState, useEffect } from 'react'
import {
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  Button,
  VStack,
  FormControl,
  FormLabel,
  Select,
  Input,
  Textarea,
  HStack,
  Text,
  Alert,
  AlertIcon,
  Spinner,
  Box,
  useToast,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Switch,
  List,
  ListItem,
  Checkbox,
  Badge
} from '@chakra-ui/react'
import { useGitHub } from '../contexts/GitHubContext'
import axios from 'axios'

const BACKEND_URL = import.meta.env.VITE_BACKEND_URL || 'http://localhost:8001'

interface GitHubPushDialogProps {
  isOpen: boolean
  onClose: () => void
  generatedCode?: string
}

export const GitHubPushDialog: React.FC<GitHubPushDialogProps> = ({
  isOpen,
  onClose,
  generatedCode = ''
}) => {
  const {
    isConnected,
    user,
    repositories,
    branches,
    selectedRepo,
    selectedBranch,
    connectGitHub,
    fetchRepositories,
    fetchBranches,
    setSelectedRepo,
    setSelectedBranch,
    pushToGitHub,
    createRepository
  } = useGitHub()

  const [isPushing, setIsPushing] = useState(false)
  const [commitMessage, setCommitMessage] = useState('Code generated by Xionimus AI')
  
  // NEW: Auto-detect all generated files
  const [generatedFiles, setGeneratedFiles] = useState<Array<{path: string, content: string, size: number}>>([])
  const [selectedFiles, setSelectedFiles] = useState<Set<string>>(new Set())
  const [isLoadingFiles, setIsLoadingFiles] = useState(false)
  
  // New repository creation
  const [newRepoName, setNewRepoName] = useState('')
  const [newRepoDescription, setNewRepoDescription] = useState('')
  const [newRepoPrivate, setNewRepoPrivate] = useState(false)
  const [isCreatingRepo, setIsCreatingRepo] = useState(false)

  const toast = useToast()

  // Auto-detect generated files from workspace
  useEffect(() => {
    if (isOpen) {
      loadGeneratedFiles()
    }
  }, [isOpen])

  useEffect(() => {
    if (isConnected && isOpen) {
      fetchRepositories()
    }
  }, [isConnected, isOpen])

  useEffect(() => {
    // Only fetch branches when dialog is open AND repo changes
    if (selectedRepo && isOpen) {
      const [owner, repo] = selectedRepo.split('/')
      fetchBranches(owner, repo)
    }
  }, [selectedRepo, isOpen])

  useEffect(() => {
    // Select all files by default when loaded
    if (generatedFiles.length > 0) {
      setSelectedFiles(new Set(generatedFiles.map(f => f.path)))
    }
  }, [generatedFiles])

  // Load all generated files from workspace
  const loadGeneratedFiles = async () => {
    setIsLoadingFiles(true)
    try {
      const response = await axios.get(`${BACKEND_URL}/api/workspaces/files`)
      const files = response.data.files || []
      
      // Convert to format needed for GitHub push
      const fileList = files.map((file: any) => ({
        path: file.relative_path || file.path,
        content: file.content || '',
        size: file.size || 0
      }))
      
      setGeneratedFiles(fileList)
      
      // Auto-select all files
      setSelectedFiles(new Set(fileList.map((f: any) => f.path)))
      
      if (fileList.length === 0) {
        toast({
          title: 'Keine Dateien gefunden',
          description: 'Es wurden keine generierten Code-Dateien im Workspace gefunden.',
          status: 'info',
          duration: 5000
        })
      }
    } catch (error) {
      console.error('Failed to load generated files:', error)
      toast({
        title: 'Fehler beim Laden der Dateien',
        description: 'Konnte generierte Dateien nicht laden',
        status: 'error',
        duration: 5000
      })
    } finally {
      setIsLoadingFiles(false)
    }
  }

  const toggleFileSelection = (filePath: string) => {
    const newSelected = new Set(selectedFiles)
    if (newSelected.has(filePath)) {
      newSelected.delete(filePath)
    } else {
      newSelected.add(filePath)
    }
    setSelectedFiles(newSelected)
  }

  const selectAllFiles = () => {
    setSelectedFiles(new Set(generatedFiles.map(f => f.path)))
  }

  const deselectAllFiles = () => {
    setSelectedFiles(new Set())
  }

  const handleConnect = async () => {
    try {
      await connectGitHub()
    } catch (error: any) {
      toast({
        title: 'GitHub OAuth nicht verfÃ¼gbar',
        description: error.message || 'GitHub OAuth ist nicht konfiguriert. Bitte kontaktieren Sie den Administrator.',
        status: 'warning',
        duration: 8000,
        isClosable: true
      })
    }
  }

  const handleCreateRepo = async () => {
    if (!newRepoName.trim()) {
      toast({
        title: 'Fehler',
        description: 'Repository-Name ist erforderlich',
        status: 'error',
        duration: 3000
      })
      return
    }

    setIsCreatingRepo(true)
    try {
      const repo = await createRepository(newRepoName, newRepoDescription, newRepoPrivate)
      toast({
        title: 'Repository erstellt!',
        description: `${repo.full_name} wurde erstellt`,
        status: 'success',
        duration: 3000
      })
      setSelectedRepo(repo.full_name)
      setNewRepoName('')
      setNewRepoDescription('')
    } catch (error: any) {
      toast({
        title: 'Fehler beim Erstellen',
        description: error.response?.data?.detail || 'Repository konnte nicht erstellt werden',
        status: 'error',
        duration: 5000
      })
    } finally {
      setIsCreatingRepo(false)
    }
  }

  const handlePush = async () => {
    if (!selectedRepo) {
      toast({
        title: 'Fehler',
        description: 'Bitte wÃ¤hlen Sie ein Repository',
        status: 'error',
        duration: 3000
      })
      return
    }

    if (selectedFiles.size === 0) {
      toast({
        title: 'Fehler',
        description: 'Bitte wÃ¤hlen Sie mindestens eine Datei zum Pushen aus',
        status: 'error',
        duration: 3000
      })
      return
    }

    setIsPushing(true)
    try {
      // Prepare files array with only selected files
      const filesToPush = generatedFiles
        .filter(file => selectedFiles.has(file.path))
        .map(file => ({
          path: file.path,
          content: file.content
        }))

      const result = await pushToGitHub(
        filesToPush,
        commitMessage
      )

      toast({
        title: 'Erfolgreich gepusht!',
        description: `${result.files_pushed} Datei(en) zu ${result.repository} gepusht`,
        status: 'success',
        duration: 5000
      })

      onClose()
    } catch (error: any) {
      toast({
        title: 'Push fehlgeschlagen',
        description: error.response?.data?.detail || 'Fehler beim Pushen',
        status: 'error',
        duration: 5000
      })
    } finally {
      setIsPushing(false)
    }
  }

  if (!isConnected) {
    return (
      <Modal isOpen={isOpen} onClose={onClose} size="md">
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Mit GitHub verbinden</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <VStack spacing={4} py={4}>
              <Box
                w="60px"
                h="60px"
                bg="gray.800"
                borderRadius="full"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <svg width="40" height="40" fill="white" viewBox="0 0 16 16">
                  <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"/>
                </svg>
              </Box>
              <Text fontSize="lg" fontWeight="600">
                GitHub Verbindung erforderlich
              </Text>
              <Text fontSize="sm" color="gray.500" textAlign="center">
                Verbinden Sie sich mit GitHub, um Code zu pushen
              </Text>
              <Button
                colorScheme="gray"
                bg="gray.800"
                color="white"
                w="100%"
                onClick={handleConnect}
                _hover={{ bg: 'gray.700' }}
              >
                Mit GitHub verbinden
              </Button>
            </VStack>
          </ModalBody>
        </ModalContent>
      </Modal>
    )
  }

  return (
    <Modal isOpen={isOpen} onClose={onClose} size="xl">
      <ModalOverlay />
      <ModalContent maxW="600px">
        <ModalHeader>
          <HStack>
            <Text>ðŸ“¤ Zu GitHub pushen</Text>
            {user && (
              <Text fontSize="sm" color="gray.500">
                ({user.login})
              </Text>
            )}
          </HStack>
        </ModalHeader>
        <ModalCloseButton />
        <ModalBody>
          <Tabs>
            <TabList>
              <Tab>Push zu Repository</Tab>
              <Tab>Neues Repository</Tab>
            </TabList>

            <TabPanels>
              <TabPanel>
                <VStack spacing={4} align="stretch">
                  <FormControl isRequired>
                    <FormLabel>Repository</FormLabel>
                    <Select
                      placeholder="Repository auswÃ¤hlen..."
                      value={selectedRepo || ''}
                      onChange={(e) => setSelectedRepo(e.target.value)}
                    >
                      {repositories.map((repo) => (
                        <option key={repo.id} value={repo.full_name}>
                          {repo.full_name} {repo.private && 'ðŸ”’'}
                        </option>
                      ))}
                    </Select>
                  </FormControl>

                  <FormControl isRequired>
                    <FormLabel>Branch</FormLabel>
                    <Select
                      value={selectedBranch}
                      onChange={(e) => setSelectedBranch(e.target.value)}
                      isDisabled={!selectedRepo}
                    >
                      {branches.map((branch) => (
                        <option key={branch.name} value={branch.name}>
                          {branch.name}
                        </option>
                      ))}
                    </Select>
                  </FormControl>

                  <FormControl isRequired>
                    <FormLabel>
                      <HStack justify="space-between" w="full">
                        <Text>Dateien ({selectedFiles.size} von {generatedFiles.length} ausgewÃ¤hlt)</Text>
                        <HStack spacing={2}>
                          <Button size="xs" onClick={selectAllFiles} variant="ghost">
                            Alle auswÃ¤hlen
                          </Button>
                          <Button size="xs" onClick={deselectAllFiles} variant="ghost">
                            Keine
                          </Button>
                          <Button size="xs" onClick={loadGeneratedFiles} variant="ghost" isLoading={isLoadingFiles}>
                            ðŸ”„ Neu laden
                          </Button>
                        </HStack>
                      </HStack>
                    </FormLabel>
                    
                    {isLoadingFiles ? (
                      <Box textAlign="center" py={4}>
                        <Spinner />
                        <Text mt={2} fontSize="sm" color="gray.500">Lade Dateien...</Text>
                      </Box>
                    ) : generatedFiles.length === 0 ? (
                      <Alert status="info">
                        <AlertIcon />
                        Keine generierten Dateien gefunden. Generieren Sie zuerst Code im Chat.
                      </Alert>
                    ) : (
                      <Box 
                        maxH="300px" 
                        overflowY="auto" 
                        border="1px solid" 
                        borderColor="gray.200" 
                        borderRadius="md" 
                        p={2}
                      >
                        <List spacing={2}>
                          {generatedFiles.map((file) => (
                            <ListItem key={file.path}>
                              <HStack justify="space-between" p={2} _hover={{ bg: 'gray.50' }} borderRadius="md">
                                <HStack flex={1}>
                                  <Checkbox
                                    isChecked={selectedFiles.has(file.path)}
                                    onChange={() => toggleFileSelection(file.path)}
                                  />
                                  <VStack align="start" spacing={0} flex={1}>
                                    <Text fontSize="sm" fontWeight="medium">
                                      {file.path}
                                    </Text>
                                    <Text fontSize="xs" color="gray.500">
                                      {(file.size / 1024).toFixed(1)} KB
                                    </Text>
                                  </VStack>
                                </HStack>
                                <Badge colorScheme={selectedFiles.has(file.path) ? 'green' : 'gray'}>
                                  {selectedFiles.has(file.path) ? 'âœ“' : 'â—‹'}
                                </Badge>
                              </HStack>
                            </ListItem>
                          ))}
                        </List>
                      </Box>
                    )}
                  </FormControl>

                  <FormControl isRequired>
                    <FormLabel>Commit Message</FormLabel>
                    <Input
                      value={commitMessage}
                      onChange={(e) => setCommitMessage(e.target.value)}
                      placeholder="z.B. Initial commit from Xionimus AI"
                    />
                  </FormControl>

                  {!repositories.length && (
                    <Alert status="info">
                      <AlertIcon />
                      Keine Repositories gefunden. Erstellen Sie ein neues!
                    </Alert>
                  )}
                </VStack>
              </TabPanel>

              <TabPanel>
                <VStack spacing={4} align="stretch">
                  <FormControl isRequired>
                    <FormLabel>Repository-Name</FormLabel>
                    <Input
                      value={newRepoName}
                      onChange={(e) => setNewRepoName(e.target.value)}
                      placeholder="mein-projekt"
                    />
                  </FormControl>

                  <FormControl>
                    <FormLabel>Beschreibung</FormLabel>
                    <Textarea
                      value={newRepoDescription}
                      onChange={(e) => setNewRepoDescription(e.target.value)}
                      placeholder="Projekt-Beschreibung..."
                      rows={3}
                    />
                  </FormControl>

                  <FormControl display="flex" alignItems="center">
                    <FormLabel mb="0">Privates Repository</FormLabel>
                    <Switch
                      isChecked={newRepoPrivate}
                      onChange={(e) => setNewRepoPrivate(e.target.checked)}
                    />
                  </FormControl>

                  <Button
                    bg="linear-gradient(135deg, #0088cc, #0094ff)"
                    color="white"
                    onClick={handleCreateRepo}
                    isLoading={isCreatingRepo}
                    loadingText="Erstelle..."
                    _hover={{
                      bg: "linear-gradient(135deg, #0094ff, #0088cc)",
                      boxShadow: "0 0 25px rgba(0, 212, 255, 0.6)"
                    }}
                    boxShadow="0 2px 15px rgba(0, 212, 255, 0.4)"
                  >
                    Repository erstellen
                  </Button>

                  <Alert status="info" fontSize="sm">
                    <AlertIcon />
                    Nach dem Erstellen kÃ¶nnen Sie im ersten Tab pushen
                  </Alert>
                </VStack>
              </TabPanel>
            </TabPanels>
          </Tabs>
        </ModalBody>

        <ModalFooter>
          <HStack spacing={3}>
            <Button variant="ghost" onClick={onClose}>
              Abbrechen
            </Button>
            <Button
              bg="linear-gradient(135deg, #0088cc, #0094ff)"
              color="white"
              onClick={handlePush}
              isLoading={isPushing}
              loadingText="Pushe..."
              isDisabled={!selectedRepo || selectedFiles.size === 0}
              _hover={{
                bg: "linear-gradient(135deg, #0094ff, #0088cc)",
                boxShadow: "0 0 25px rgba(0, 212, 255, 0.6)"
              }}
              boxShadow="0 2px 15px rgba(0, 212, 255, 0.4)"
            >
              ðŸ“¤ {selectedFiles.size} Datei(en) pushen
            </Button>
          </HStack>
        </ModalFooter>
      </ModalContent>
    </Modal>
  )
}
